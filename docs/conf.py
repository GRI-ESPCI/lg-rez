# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

import os
import re
import sys

from m2r import MdInclude


sys.path.insert(0, os.path.abspath('..'))


# -- Project information -----------------------------------------------------

project = 'lg-rez'
copyright = ('2020 - 2021, Loïc Simon / Tom Lacoma. '
             'Sphinx theme by Rapptz for discord.py')
author = 'Loïc Simon, Tom Lacoma'

# The short X.Y version
version = ''
with open('../lgrez/__init__.py') as f:
    version = re.search(r"""^__version__\s*=\s*['"](.*?)['"]""",
                        f.read(), re.MULTILINE).group(1)

assert version, '__version__ not found in __init__.py'

# The full version, including alpha/beta/rc tags
release = version


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
sys.path.append(os.path.abspath(''))

extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'sphinx.ext.coverage',
    'sphinx.ext.viewcode',
    'recommonmark',
]


# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'fr'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'basic'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

html_css_files = ['discordpy.css']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'lg-rezdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'lg-rez.tex', 'lg-rez Documentation',
     'Loïc Simon, Tom Lacoma', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'lg-rez', 'lg-rez Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'lg-rez', 'lg-rez Documentation',
     author, 'lg-rez', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# Documents to append as an appendix to all manuals.
#
# texinfo_appendices = []

# If false, no module index is generated.
#
# texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#
# texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#
# texinfo_no_detailmenu = False


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'python': ('https://docs.python.org/', None),
    'discord': ('https://discordpy.readthedocs.io/en/v1.5.1/', None),
    'sqlalchemy': ('https://docs.sqlalchemy.org/en/13/', None),
    'gspread': ('https://gspread.readthedocs.io/en/latest/', None),
    'requests': ('https://requests.readthedocs.io/en/v3.0.0/', None),
    'psycopg2': ('https://www.psycopg.org/docs/', None),
    'asyncode': ('https://asyncode.readthedocs.io/en/1.0.0/', None),
}



#  Autocog preprocessing code

# Use the following pseudo-directive to autodocument a cog:
# .. --autocog--:module.Cog: {}

import lgrez


def process_autocogs(filename):
    """Replaces ".. --autocog--:module.Cog: {<...>}" sequences in filename"""
    with open(filename, "r") as file:
        # replace --autocog--: pseudo-directives with replace(match)
        repl, nrepls = re.subn(
            r"^([ \t]*).. --autocog--:(.+?):[\s\.]*{.*?}",
            replace, file.read(), flags=(re.MULTILINE | re.DOTALL)
        )

    if nrepls:
        with open(filename, "w") as file:
            file.write(repl)


def replace(match):
    """Returns the string to put instead of --autocog-- pseudo-directives."""
    indent = match.group(1)
    cogname = match.group(2)

    indent_in = indent + "    "
    indent_in_in = indent_in + "    "
    cog = eval(cogname)

    txt = (f"{indent}.. --autocog--:{cogname}: {{ \n"
           f"{indent}.. (this bloc is autogenerated each time docs "
           "are build, don't \n"
           f"{indent}.. change manually! See end of conf.py for "
           "generation code.)\n"        # yes,here
           f"{indent}.. autoclass:: {cogname}\n"
           f"{indent_in}:members:\n\n"
           f"{indent_in}.. include:: cognote.rst\n\n"
           f"{indent_in}Commandes définies dans ce cog :\n\n"
    )

    for i, command in enumerate(cog.get_commands(cog)):
        # Aliases
        aliastext = ""
        if command.aliases:
            aliases = ", ".join(f"``!{alias}``" for alias in command.aliases)
            aliastext = f" (alias {aliases})"

        # Anchor (:ref: links)
        txt += f"{indent_in_in}.. _{command.name}:\n"
        if i == 0:
            txt += "\n"

        # Command
        txt += (f"{indent_in}- :Commande ``!{command.name}`` "
                f"{aliastext}\N{NO-BREAK SPACE}:\n"
                f"{indent_in_in}.. automethod:: "
                f"{cogname}.{command.callback.__name__}.callback\n")

    txt += f"\n{indent}.. }}"
    return txt


def setup(app):
    for filename in os.listdir('.'):
        if filename.endswith(".rst"):       # for each .rst file
            process_autocogs(filename)

    # from m2r to make `mdinclude` work
    app.add_config_value('no_underscore_emphasis', False, 'env')
    app.add_config_value('m2r_parse_relative_links', False, 'env')
    app.add_config_value('m2r_anonymous_references', False, 'env')
    app.add_config_value('m2r_disable_inline_math', False, 'env')
    app.add_directive('mdinclude', MdInclude)
